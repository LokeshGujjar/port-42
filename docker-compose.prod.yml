# üê≥ Port42 Docker Compose - Production Setup
version: '3.8'

services:
  # Main Application
  port42-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: port42-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://port42-db:27017/port42_production
      - REDIS_URL=redis://port42-redis:6379
    env_file:
      - .env.production
    depends_on:
      - port42-db
      - port42-redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - port42-network
    healthcheck:
      test: ["CMD", "node", "backend/utils/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  port42-db:
    image: mongo:6.0
    container_name: port42-db
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secure_password_change_me
      - MONGO_INITDB_DATABASE=port42_production
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - port42-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/port42_production --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  port42-redis:
    image: redis:7-alpine
    container_name: port42-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass secure_redis_password_change_me
    volumes:
      - redis_data:/data
    networks:
      - port42-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  port42-nginx:
    image: nginx:alpine
    container_name: port42-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - port42-app
    networks:
      - port42-network

  # Log Management (optional)
  port42-logs:
    image: grafana/loki:2.9.0
    container_name: port42-logs
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./docker/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - port42-network
    command: -config.file=/etc/loki/local-config.yaml

  # Monitoring (optional)
  port42-monitor:
    image: prom/prometheus:latest
    container_name: port42-monitor
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - port42-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  loki_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  port42-network:
    driver: bridge
